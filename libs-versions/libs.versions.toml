[versions]
spring-boot = "3.4.4"
dependency-management = "1.1.7"
mapstruct = "1.6.3"
spring-cloud-starter = "4.2.1"
spring-boot-starter = "3.4.5"
spring-kafka = "4.0.0-M2"
lombok = "1.18.38"
springdoc-openapi-starter-webmvc-ui = "2.8.4"
spring-dotenv = "4.0.0"
postgresql = "42.7.7"
jjwt = "0.12.6"


[libraries]
spring-cloud-starter-bootstrap = { module = "org.springframework.cloud:spring-cloud-starter-bootstrap", version.ref = "spring-cloud-starter" }
spring-cloud-starter-netflix-eureka-client = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client", version.ref = "spring-cloud-starter" }
spring-cloud-starter-netflix-eureka-server = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server", version.ref = "spring-cloud-starter" }
spring-cloud-starter-loadbalancer = { module = "org.springframework.cloud:spring-cloud-starter-loadbalancer", version.ref = "spring-cloud-starter" }
spring-cloud-starter-gateway = { module = "org.springframework.cloud:spring-cloud-starter-gateway", version.ref = "spring-cloud-starter" }

spring-boot-starter = { module = "org.springframework.boot:spring-boot-starter", version.ref = "spring-boot-starter" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "spring-boot-starter" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "spring-boot-starter" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation", version.ref = "spring-boot-starter" }
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa", version.ref = "spring-boot-starter" }
spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security", version.ref = "spring-boot-starter" }

spring-kafka = { module = "org.springframework.kafka:spring-kafka", version.ref = "spring-kafka" }

lombok = { module = "org.projectlombok:lombok", version.ref = "lombok" }

springdoc-openapi-starter-webmvc-ui = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springdoc-openapi-starter-webmvc-ui" }

spring-dotenv = { module = "me.paulschwarz:spring-dotenv", version.ref = "spring-dotenv" }

postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }

org-mapstruct = { module = "org.mapstruct:mapstruct", version.ref = "mapstruct" }
org-mapstruct-processor = { module = "org.mapstruct:mapstruct-processor", version.ref = "mapstruct" }

jsonwebtoken-jjwt-api = { module = "io.jsonwebtoken:jjwt-api", version.ref = "jjwt" }
jsonwebtoken-jjwt-impl = { module = "io.jsonwebtoken:jjwt-impl", version.ref = "jjwt" }
jsonwebtoken-jjwt-jackson = { module = "io.jsonwebtoken:jjwt-jackson", version.ref = "jjwt" }


[plugins]
org-springframework-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
io-spring-dependency-management = {id = "io.spring.dependency-management", version.ref = "dependency-management"}


[bundles]
