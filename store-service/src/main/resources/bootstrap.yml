spring:
  config:
    import: optional:file:.env[.properties]
  application:
    name: store-service
  datasource:
    url: jdbc:postgresql://${POSTGRES_DATABASE_DOMAIN}:${POSTGRES_DATABASE_PORT}/${POSTGRES_DATABASE_NAME}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    database: POSTGRESQL
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        show-sql: true
  sql:
    init:
      platform: postgres
  kafka:
    bootstrap-servers: kafka-broker-1:9092,kafka-broker-2:9192,kafka-broker-3:9292
    consumer:
      group-id: posting-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            type:
              mapping: |
                test-model:name.snosminin.storeservice.events.model.TestEventModel,
                create-comment-model:name.snosminin.storeservice.dto.CreateCommentDto,
                create-follow-model:name.snosminin.storeservice.dto.CreateFollowDto,
                create-like-model:name.snosminin.storeservice.dto.CreateLikeDto,
                create-post-model:name.snosminin.storeservice.dto.CreatePostDto,
                create-user-model:name.snosminin.storeservice.dto.CreateUserDto
server:
  port: 8181
eureka:
  client:
    healthcheck:
      enabled: true
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://eureka-server:8070/eureka/
  instance:
    preferIpAddress: true